clear all
close all
clc


genNewData = true;

inputFile = 'dataset/DeformedMesh/dmesh0.txt';

numData = 4;


if (genNewData)
    for cnt = 1 : numData
        axis = randn(3,1);
        axis = axis / norm(axis);
        Rot = SO3.Exp(0.5 * cnt * axis);
        % Rot = 10* rand(3,3);
        Data{cnt} = genData (inputFile, Rot);
    end
end


% zero - center the data
for cnt = 1 : numData
    data = Data{cnt};
    Data{cnt} = data - sum(data, 2)/size(data, 2);
end



dim = size(Data{1}, 2);
KK = zeros(dim, dim);
for cnt = 1 : numData
    D = Data{cnt};
    Proj =D' * inv(D*D') * D;
    KK = KK + Proj;
end


KKK =  numData * eye(dim) - KK;


% solve by I - Q
[V1, eigValEigen1, eigenValueAll1] = byEigen (KKK, 3, 'smallest');
eigVal = getEigenValue(Data);  [sVal, sIndex] = sort(eigVal, 'ascend');
scaledV1 =  diag(sqrt(sVal)) * V1';

% solve by Q
[V2, eigValEigen2, eigenValueAll2] = byEigen (KK, 3, 'largest');
eigVal = getEigenValue(Data);  [sVal, sIndex] = sort(eigVal, 'descend');
scaledV2 =  diag(sqrt(sVal)) * V2';

checkEigenVecDiff = norm (abs(V1(:, end:-1:end-2)) - abs (V2) )




plotCloud3 (Data{1}, scaledV1, scaledV2, 'Data', 'by: 1- Q', 'by: Q');


sumEigen = eigValEigen1 + eigValEigen2(end:-1:1)
%sumEigenAll = eigenValueAll1 + eigenValueAll2(end:-1:1)

eigVals = [eigenValueAll2(1:10, :), eigenValueAll1(end-9:end, :),  eigenValueAll1(1:10, :), eigenValueAll2(end-9:end, :)]

V1' * ones(dim, 1)
V2' * ones(dim, 1)





for cnt = 1 : numData
    D = Data{cnt};
    R = inv(D*D') * D * scaledV1';
    A{cnt} = R;
    checkR = R * R'
end


for cnt = 1 : numData
    D = Data{cnt};
    R = inv(D*D') * D * scaledV2';
    A{cnt} = R;
    checkR = R * R'
end



        function v = getEigenValue (Data)
            
            eigVal = zeros (3, max(size(Data)));
            
            for ii = 1 : max(size(Data))
                
                tmp = Data{ii} * Data{ii}';
                
                eigVal(:, ii) = sort ( eig ( (tmp+tmp')/2 ) );
                
            end
            
            v = sum(eigVal, 2) /max(size(Data));
            
            eigVal
            
        end
        
        
        
        function [V, eigValEigen, eigenValueAll] = byEigen (K, d, str)
            
            offset = 0;

            [Q, D ] = eig( (K+K')/2 );
            
            eigVal = diag(D);
            
            [eigVal, Index] = sort(eigVal, 'descend');  Q = Q (:, Index);

            if  strcmp (str, 'largest')
                
                V = Q (:, 1+offset:d+offset);
                
                eigValEigen =  eigVal (1+offset:d+offset);

            end
            
            if strcmp (str, 'smallest')
                
                V = Q (:, end-d+1-offset:end-offset);
                
                eigValEigen =  eigVal (end-d+1-offset:end-offset);

            end
            
            eigenValueAll = eigVal;
            
            CheckEigenVectorOrthonormal = V' * V

        end


        
        
        


function dataMatr =  genData (InputFile, Rotation)


dataMatr = [];
fid = fopen (InputFile, 'r');
lstr = fgetl (fid);
pcnt = 0;

while ischar (lstr)
    
    if (size (lstr, 2) > 0)
        
        pcnt = pcnt + 1;
        
        dataMatr(:, pcnt) = str2double(split(lstr));
        
    end
    
    lstr = fgetl (fid);
    
end

fclose (fid);

% write data

dataMatr = Rotation * dataMatr;

dataMatr = dataMatr + 1 * rand (size(dataMatr, 1), size(dataMatr,2));


end




        function plotCloud3 (Cloud1, Cloud2, Cloud3, figTitle1, figTitle2, figTitle3)
            
            fig = figure;
            fig.Position = [50, 800, 1800, 800];
            
            subplot(1,3,1)
            
            plot3(Cloud1(1,:), Cloud1(2,:), Cloud1(3,:), 'r.');
            axis equal;
            title (figTitle1);
            
            subplot(1,3,2)
            plot3(Cloud2(1,:), Cloud2(2,:), Cloud2(3,:), 'b.');
            axis equal;
            title (figTitle2);
            
            subplot(1,3,3)
            plot3(Cloud3(1,:), Cloud3(2,:), Cloud3(3,:), 'g.');
            axis equal;
            title (figTitle3);
            
            sgtitle('Shape Estimations: All data shapes are generated by noising the original data shape, then adding rotations.');
            
        end